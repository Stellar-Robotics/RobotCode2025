// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./wpilibNewCommands/generate_hids.py. DO NOT MODIFY

package frc.robot.RobotControl;

import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.wpilibj.event.EventLoop;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import edu.wpi.first.wpilibj2.command.button.CommandGenericHID;
import edu.wpi.first.wpilibj2.command.button.Trigger;

/**
 * A version of {@link StellarController} with {@link Trigger} factories for command-based.
 *
 * @see StellarController
 */
@SuppressWarnings("MethodName")
public class CommandStellarController extends CommandGenericHID {
  private final StellarController m_hid;

  /**
   * Construct an instance of a controller.
   *
   * @param port The port index on the Driver Station that the controller is plugged into.
   */
  public CommandStellarController(int port) {
    super(port);
    m_hid = new StellarController(port);
  }

  /**
   * Get the underlying GenericHID object.
   *
   * @return the wrapped GenericHID object
   */
  @Override
  public StellarController getHID() {
    return m_hid;
  }


  /**
   * Constructs a Trigger instance around the LT button's digital signal.
   *
   * @return a Trigger instance representing the LT button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #leftTrigger(EventLoop)
   */
  public Trigger leftTrigger() {
    return leftTrigger(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the LT button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the LT button's digital signal attached
   *     to the given loop.
   */
  public Trigger leftTrigger(EventLoop loop) {
    return button(StellarController.Buttons.kLeftTrigger.value, loop);
  }




  /**
   * Constructs a Trigger instance around the RT button's digital signal.
   *
   * @return a Trigger instance representing the RT button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #rightTrigger(EventLoop)
   */
  public Trigger rightTrigger() {
    return rightTrigger(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the RT button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the RT button's digital signal attached
   *     to the given loop.
   */
  public Trigger rightTrigger(EventLoop loop) {
    return button(StellarController.Buttons.kRightTrigger.value, loop);
  }




  /**
   * Constructs a Trigger instance around the RB button's digital signal.
   *
   * @return a Trigger instance representing the RB button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #rightBumper(EventLoop)
   */
  public Trigger rightBumper() {
    return rightBumper(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the RB button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the RB button's digital signal attached
   *     to the given loop.
   */
  public Trigger rightBumper(EventLoop loop) {
    return button(StellarController.Buttons.kRightBumper.value, loop);
  }




  /**
   * Constructs a Trigger instance around the right center button's digital signal.
   *
   * @return a Trigger instance representing the right bumper button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #rightCenter(EventLoop)
   */
  public Trigger rightCenter() {
    return rightCenter(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the right center button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the right bumper button's digital signal attached
   *     to the given loop.
   */
  public Trigger rightCenter(EventLoop loop) {
    return button(StellarController.Buttons.kRightCenter.value, loop);
  }




  /**
   * Constructs a Trigger instance around the L1 button's digital signal.
   *
   * @return a Trigger instance representing the L1 button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #leftTop(EventLoop)
   */
  public Trigger leftTop() {
    return leftTop(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the L1 button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the L1 button's digital signal attached
   *     to the given loop.
   */
  public Trigger leftTop(EventLoop loop) {
    return button(StellarController.Buttons.kLeftTop.value, loop);
  }




  /**
   * Constructs a Trigger instance around the L2 button's digital signal.
   *
   * @return a Trigger instance representing the L2 button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #leftBottom(EventLoop)
   */
  public Trigger leftBottom() {
    return leftBottom(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the L2 button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the L2 button's digital signal attached
   *     to the given loop.
   */
  public Trigger leftBottom(EventLoop loop) {
    return button(StellarController.Buttons.kLeftBottom.value, loop);
  }




  /**
   * Constructs a Trigger instance around the R1 button's digital signal.
   *
   * @return a Trigger instance representing the R1 button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #rightTop(EventLoop)
   */
  public Trigger rightTop() {
    return rightTop(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the R1 button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the R1 button's digital signal attached
   *     to the given loop.
   */
  public Trigger rightTop(EventLoop loop) {
    return button(StellarController.Buttons.kRightTop.value, loop);
  }




  /**
   * Constructs a Trigger instance around the R2 button's digital signal.
   *
   * @return a Trigger instance representing the R2 button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #rightBottom(EventLoop)
   */
  public Trigger rightBottom() {
    return rightBottom(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the R2 button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the R2 button's digital signal attached
   *     to the given loop.
   */
  public Trigger rightBottom(EventLoop loop) {
    return button(StellarController.Buttons.kRightBottom.value, loop);
  }




  /**
   * Constructs a Trigger instance around the C1 button's digital signal.
   *
   * @return a Trigger instance representing the C1 button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #center(EventLoop)
   */
  public Trigger center() {
    return center(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the C1 button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the C1 button's digital signal attached
   *     to the given loop.
   */
  public Trigger center(EventLoop loop) {
    return button(StellarController.Buttons.kCenter.value, loop);
  }




  /**
   * Constructs a Trigger instance around the SL button's digital signal.
   *
   * @return a Trigger instance representing the SL button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #switchLeft(EventLoop)
   */
  public Trigger switchLeft() {
    return switchLeft(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the SL button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the SL button's digital signal attached
   *     to the given loop.
   */
  public Trigger switchLeft(EventLoop loop) {
    return button(StellarController.Buttons.kSwitchLeft.value, loop);
  }




  /**
   * Constructs a Trigger instance around the SM button's digital signal.
   *
   * @return a Trigger instance representing the SM button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #switchMiddle(EventLoop)
   */
  public Trigger switchMiddle() {
    return switchMiddle(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the SM button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the SM button's digital signal attached
   *     to the given loop.
   */
  public Trigger switchMiddle(EventLoop loop) {
    return button(StellarController.Buttons.kSwitchMiddle.value, loop);
  }




  /**
   * Constructs a Trigger instance around the SR button's digital signal.
   *
   * @return a Trigger instance representing the SR button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #switchRight(EventLoop)
   */
  public Trigger switchRight() {
    return switchRight(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the SR button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the SR button's digital signal attached
   *     to the given loop.
   */
  public Trigger switchRight(EventLoop loop) {
    return button(StellarController.Buttons.kSwitchRight.value, loop);
  }




  /**
   * Constructs a Trigger instance around the RP button's digital signal.
   *
   * @return a Trigger instance representing the RP button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #rightPaddle(EventLoop)
   */
  public Trigger rightPaddle() {
    return rightPaddle(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the RP button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the RP button's digital signal attached
   *     to the given loop.
   */
  public Trigger rightPaddle(EventLoop loop) {
    return button(StellarController.Buttons.kRightPaddle.value, loop);
  }




  /**
   * Constructs a Trigger instance around the LP button's digital signal.
   *
   * @return a Trigger instance representing the LP button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #leftPaddle(EventLoop)
   */
  public Trigger leftPaddle() {
    return leftPaddle(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the LP button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the LP button's digital signal attached
   *     to the given loop.
   */
  public Trigger leftPaddle(EventLoop loop) {
    return button(StellarController.Buttons.kLeftPaddle.value, loop);
  }












  /**
   * Constructs a Trigger instance around the left stick button's digital signal.
   *
   * @return a Trigger instance representing the left stick button's digital signal attached
   *     to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   * @see #leftStick(EventLoop)
   */
  public Trigger leftStick() {
    return leftStick(CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the left stick button's digital signal.
   *
   * @param loop the event loop instance to attach the event to.
   * @return a Trigger instance representing the left stick button's digital signal attached
   *     to the given loop.
   */
  public Trigger leftStick(EventLoop loop) {
    return button(StellarController.Buttons.kLeftStick.value, loop);
  }

  /**
   * Constructs a Trigger instance around the axis value of the right trigger. The returned
   * trigger will be true when the axis value is greater than {@code threshold}.
   *
   * @param threshold the minimum axis value for the returned {@link Trigger} to be true. This value
   *     should be in the range [0, 1] where 0 is the unpressed state of the axis.
   * @param loop the event loop instance to attach the Trigger to.
   * @return a Trigger instance that is true when the right trigger's axis exceeds the provided
   *     threshold, attached to the given event loop
   */
  public Trigger rightRotary(double threshold, EventLoop loop) {
    return axisGreaterThan(StellarController.Axis.kRightRotary.value, threshold, loop);
  }

  /**
   * Constructs a Trigger instance around the axis value of the right trigger. The returned
   * trigger will be true when the axis value is greater than {@code threshold}.
   *
   * @param threshold the minimum axis value for the returned {@link Trigger} to be true. This value
   *     should be in the range [0, 1] where 0 is the unpressed state of the axis.
   * @return a Trigger instance that is true when the right trigger's axis exceeds the provided
   *     threshold, attached to the {@link CommandScheduler#getDefaultButtonLoop() default scheduler
   *     button loop}.
   */
  public Trigger rightRotary(double threshold) {
    return rightRotary(threshold, CommandScheduler.getInstance().getDefaultButtonLoop());
  }

  /**
   * Constructs a Trigger instance around the axis value of the right trigger. The returned trigger
   * will be true when the axis value is greater than 0.5.
   *
   * @return a Trigger instance that is true when the right trigger's axis exceeds 0.5, attached to
   *     the {@link CommandScheduler#getDefaultButtonLoop() default scheduler button loop}.
   */
  public Trigger rightRotary() {
    return rightRotary(0.5);
  }

  /**
   * Get the X axis value of left side of the controller.
   *
   * @return The axis value.
   */
  public double getLeftX() {
    return m_hid.getLeftX();
  }

  /**
   * Get the Y axis value of left side of the controller.
   *
   * @return The axis value.
   */
  public double getLeftY() {
    return m_hid.getLeftY();
  }

  /**
   * Get the rotation of the right rotary pad
   *
   * @return The axis value.
   */
  public Rotation2d getRightRotary() {
    return m_hid.getRightRotary();
  }
}
